{"name": "test_invalid_method_type", "status": "skipped", "statusDetails": {"message": "AssertionError: assert 200 == 405\n +  where 200 = <Response [200]>.status_code\n +  and   405 = <lookup 'status_codes'>.METHOD_NOT_ALLOWED\n +    where <lookup 'status_codes'> = requests.codes", "trace": "self = <functional_tests.test_location_day.TestLocationDay object at 0x0000023D2A157C40>, get_location_api_url = 'https://www.metaweather.com/api/location', get_valid_date = '2020/12/30'\nget_valid_woeid = 2295412\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.Smoke\n    @pytest.mark.xfail\n    def test_invalid_method_type(self, get_location_api_url,\n                                 get_valid_date, get_valid_woeid):\n        \"\"\"\n            Test to verify if appropriate error is logged when request on metaweather\n                api Location is made with invalid method type\n        \"\"\"\n    \n        self.log.info((\"*\" * 40) + \" test_invalid_method_type \" + (\"*\" * 40))\n    \n        # Reading from conftest value for woeid & date\n        woeid = get_valid_woeid\n        date =get_valid_date\n    \n        # Getting the response after making POST API call\n        response = requests.post(f\"{get_location_api_url}/{woeid}/{date}\")\n    \n        self.log.info(\n            \"\\nActual Response:\\nResponse Code: %s\", response.status_code)\n    \n        allure.dynamic.description(\n            \"Response time for the request is: \" +\n            str(response.elapsed.total_seconds()))\n    \n>       assert response.status_code == requests.codes.METHOD_NOT_ALLOWED\nE       AssertionError: assert 200 == 405\nE        +  where 200 = <Response [200]>.status_code\nE        +  and   405 = <lookup 'status_codes'>.METHOD_NOT_ALLOWED\nE        +    where <lookup 'status_codes'> = requests.codes\n\nfunctional_tests\\test_location_day.py:97: AssertionError"}, "description": "Response time for the request is: 1.63269", "attachments": [{"name": "log", "source": "91d4fbef-ebbc-46b8-abb8-4b44a926f703-attachment.txt", "type": "text/plain"}], "start": 1609738947941, "stop": 1609738951135, "uuid": "41bdb6ad-5d85-4b1e-b2d0-6c1125ca997d", "historyId": "8dcb1358f2e3b303fc584754dc418294", "testCaseId": "88b758e9e7560d0e35ccd84bad772a8c", "fullName": "functional_tests.test_location_day.TestLocationDay#test_invalid_method_type", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "@pytest.mark.xfail"}, {"name": "tag", "value": "LocationDay"}, {"name": "tag", "value": "Smoke"}, {"name": "parentSuite", "value": "functional_tests"}, {"name": "suite", "value": "test_location_day"}, {"name": "subSuite", "value": "TestLocationDay"}, {"name": "host", "value": "4JK4X33"}, {"name": "thread", "value": "24456-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "functional_tests.test_location_day"}]}